# -*- coding: utf-8 -*-
"""Green.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uyPlOXqMrq78pY8jtSf9NZZLu7WeK9hy
"""

##Importing stuff
import sympy as sp
import numpy as np
import scipy as scp

# sp.init_printing()  # pretty printing in notebook
#%%

import pickle

f = open('GreenEE.dat', 'rb')
GreenEE = pickle.load(f)
f.close()

#%%

## Constants and variables

c_ = sp.symbols('c')  # speed of light
epsilon_ = sp.symbols(r'\varepsilon')

x,y,z,x_,y_,z_,xp,yp,zp,omega_,v_, k_ = sp.symbols("x y z x' y' z' x_p y_p z_p omega v k")   
# position, position of specimen, freq. of photon, speed of electron

gamma_ = sp.symbols(r'\gamma_{L}')

iu = sp.I

alpha_EE = sp.MatrixSymbol("alphaEE", 3, 3)
alpha_MM = sp.MatrixSymbol("alphaMM", 3, 3)
alpha_EM = sp.MatrixSymbol("alphaEM", 3, 3)
alpha_ME = - alpha_EM.T

#%% 

# myEM = np.array([[1,0,1],
#                   [0,2,0],
#                   [1,0,3]])

# G = GreenEE.subs([(c,1),
#              (epsilon, 1),
#              (k,1),
#              (v,1),
#              (xp,0),
#              (yp,0),
#              (zp,0),
#              (omega,0.01),
#              (gamma,1)])

# GG = G.subs([( alpha_EE, sp.zeros(3,3) ),
#                    ( alpha_MM, sp.zeros(3,3) ),
#                    ( alpha_EM, myEM )])
#%%

# v = sp.Matrix([[1],
#                [2],
#                [3]])


# s = v.T @ GG @ v
# np.size(s)

#%%

def setconstants(G, c=1, epsilon=1, SI=False):
    gamma = 1/sp.sqrt( 1 - (v_/c_)**2 )
    if SI:
        c = scp.constants.c
        epsilon = scp.constants.epsilon_0
    GG =     G.subs(gamma_,gamma)
    
    return GG.subs([(c_,c),
                  (epsilon_, epsilon)])

def setpolarizability(G, aEE, aMM, aEM):
    return  G.subs([( alpha_EE, sp.Matrix(aEE) ),
                    ( alpha_MM, sp.Matrix(aMM) ),
                    ( alpha_EM, sp.Matrix(aEM) )])

def setparticlepos(G, ppos): 
    xpos, ypos, zpos = tuple(ppos)
    return G.subs([(xp, xpos),
                   (yp, ypos),
                   (zp, zpos)])

def setelectronparameters(G, k=1, v=1):
    return G.subs([(k_,k),
                   (v_,v)])

def setpos(G, pos): 
    xpos, ypos, zpos = tuple(pos)
    return G.subs([(x, xpos),
                   (y, ypos),
                   (z, zpos)]) 

def setpos_(G, pos): 
    xpos, ypos, zpos = tuple(pos)
    return G.subs([(x_, xpos),
                   (y_, ypos),
                   (z_, zpos)])
     
def setomega(G, omega):
    return G.subs(omega_, omega)

def setup(ppos, k, v, SI=False):
    G = setconstants(GreenEE, SI=SI)
    G = setelectronparameters(G, k, v)
    G = setparticlepos(G, ppos)
    return G



# (k_,k),
# (v_,v),
# (omega,0.01),
# (v,1),


# Gong = setup([0,0,0], np.zeros((3,3)), np.zeros((3,3)), myEM, 10000,1000)
# npG = np.array((setpos(setomega(Gong, 0.9), [1,2,3]).evalf())).astype(complex)
#sp.lambdify

